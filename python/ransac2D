import cv2
import numpy as np
import matplotlib.pyplot as plt
from binCents import getBinCent
import math

num_bins =8
objId  =5
imId =1

w = 640
h = 480

base_path = '/Users/apurvnigam/study_ucl/term1/MScThesis/hinterstoisser/'

rgb_in_mpath = base_path+ 'test/{:02d}/rgb/{:04d}.png'
depth_in_mpath = base_path+ 'test/{:02d}/depth/{:04d}.png'
labelled_color_mpath = base_path+ 'test/{:02d}/{:d}bins/labelled_colored/{:04d}.png'
labelled_mpath = base_path+ 'test/{:02d}/{:d}bins/labelled/{:04d}.png'
seg_in_mpath = base_path+ 'test/{:02d}/seg/{:04d}.png'
model_mpath = base_path + 'models/obj_{:02d}.ply'  # Already transformed
scene_info_mpath = base_path + 'test/{:02d}/info.yml'
scene_gt_mpath = base_path + 'test/{:02d}/gt.yml'

minDist2D = 10
minDist3D = 10
minDepth = 300
minArea = 400



def getMinDist(pointSet, point):
    minDist = -1.0
    numPts = pointSet.shape[0]
    dim = pointSet.shape[1]

    for i in range(0,pointSet.shape[0]):
        srcPt = pointSet[i,:]
        destPt = point[0,:]
        # print srcPt
        # print destPt
        if(minDist<0):
            minDist=cv2.norm(srcPt,destPt)
        else:
            minDist = np.min([minDist,cv2.norm(srcPt, destPt)],axis=0)


    return  minDist

def samplePoint(objId, pts3D,pts2D,pt2D, pt2DLabel):
    objId=2;
    violation=False;

    pts2D.reshape([pts2D.shape[0],2])
    pts3D.reshape([pts3D.shape[0],3])

    if(getMinDist(pts2D,pt2D) < minDist2D):
        violation = violation or True

    bin_id = pt2DLabel
    pt3D = getBinCent(objId, num_bins,bin_id)

    if (getMinDist(pts3D, pt3D) < minDist2D):
        violation = violation or True

    numPts2D = pts2D.shape[0]
    # pts2D = np.vstack((pts2D,pt2D)).reshape([numPts2D+1,2])

    pts2D = np.append(pts2D,pt2D,axis=0)



    numPts3D = pts3D.shape[0]
    # pts3D = np.vstack((pts3D,pt3D)).reshape([numPts3D+1,3])
    pts3D = np.append(pts3D,pt3D,axis=0)


    return  ~violation, pts2D,pts3D

#
#
#
#
#
# def findLabel(px,py):
#
#
# def findMode(label):



def ranssac2D():

    segImg = cv2.imread(seg_in_mpath.format(objId, imId), -1)
    labelImg = cv2.imread(labelled_mpath.format(objId,num_bins,imId),-1)

    maskPixels = []
    for r in range(0 ,h):
        for c in range(0,640):
            if (segImg[r, c] > 0):
                maskPixels.append([r,c])

    numObjPixels = len(maskPixels)
    segMask = np.array(maskPixels)
    points2D = np.empty((0,2), float)
    points3D = np.empty((0,3), float)
    perms = np.random.permutation(numObjPixels);
    randIndex = perms[0]
    pt2D = np.array(segMask[randIndex],float).reshape([1,2])
    label_pt1 = labelImg[int(pt2D[0,0]),int(pt2D[0,1])]


    # Now Sample for 2D-3D correspondance
    _, points2D, points3D = samplePoint(objId, pts3D=points3D, pts2D=points2D, pt2D=pt2D, pt2DLabel=label_pt1)
    perms = np.random.permutation(numObjPixels);
    randIndex = perms[0]
    pt2D = np.array(segMask[randIndex], float).reshape([1, 2])
    label_pt1 = labelImg[int(pt2D[0, 0]), int(pt2D[0, 1])]
    _, points2D, points3D = samplePoint(objId, pts3D=points3D, pts2D=points2D, pt2D=pt2D, pt2DLabel=label_pt1)
    perms = np.random.permutation(numObjPixels);
    randIndex = perms[0]
    pt2D = np.array(segMask[randIndex], float).reshape([1, 2])
    label_pt1 = labelImg[int(pt2D[0, 0]), int(pt2D[0, 1])]
    _, points2D, points3D = samplePoint(objId, pts3D=points3D, pts2D=points2D, pt2D=pt2D, pt2DLabel=label_pt1)
    perms = np.random.permutation(numObjPixels);
    randIndex = perms[0]
    pt2D = np.array(segMask[randIndex], float).reshape([1, 2])
    label_pt1 = labelImg[int(pt2D[0, 0]), int(pt2D[0, 1])]
    _, points2D, points3D = samplePoint(objId, pts3D=points3D, pts2D=points2D, pt2D=pt2D, pt2DLabel=label_pt1)



    print  points3D, points2D



ranssac2D()